// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package otel

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// PropagatorTracecontext is a Propagator of type tracecontext.
	PropagatorTracecontext Propagator = "tracecontext"
	// PropagatorBaggage is a Propagator of type baggage.
	PropagatorBaggage Propagator = "baggage"
	// PropagatorB3 is a Propagator of type b3.
	PropagatorB3 Propagator = "b3"
	// PropagatorB3multi is a Propagator of type b3multi.
	PropagatorB3multi Propagator = "b3multi"
	// PropagatorJaeger is a Propagator of type jaeger.
	PropagatorJaeger Propagator = "jaeger"
	// PropagatorXray is a Propagator of type xray.
	PropagatorXray Propagator = "xray"
	// PropagatorOttrace is a Propagator of type ottrace.
	PropagatorOttrace Propagator = "ottrace"
)

var ErrInvalidPropagator = errors.New("not a valid Propagator")

// String implements the Stringer interface.
func (x Propagator) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Propagator) IsValid() bool {
	_, err := ParsePropagator(string(x))
	return err == nil
}

var _PropagatorValue = map[string]Propagator{
	"tracecontext": PropagatorTracecontext,
	"baggage":      PropagatorBaggage,
	"b3":           PropagatorB3,
	"b3multi":      PropagatorB3multi,
	"jaeger":       PropagatorJaeger,
	"xray":         PropagatorXray,
	"ottrace":      PropagatorOttrace,
}

// ParsePropagator attempts to convert a string to a Propagator.
func ParsePropagator(name string) (Propagator, error) {
	if x, ok := _PropagatorValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _PropagatorValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Propagator(""), fmt.Errorf("%s is %w", name, ErrInvalidPropagator)
}
